@model MEGAPos.Models.PriceList
@{
    ViewBag.Title = "Price List";
}
<link href="~/Content/UI/indexes.css" rel="stylesheet" />
<h2>@ViewBag.Title</h2>
<div class="root cart">
    <div class="cart-action">
        <table class="table table-striped table-responsive">
            <thead class="bg-secondary text-white-50" style="text-align:center; background-color:dimgray;">

            </thead>
            <tbody>
                <tr>
                    <td style="padding:10px;" class="field ui left icon input">
                        <input class="form-control  rounded" type="text" id="getItemname" name="ItemName"
                               placeholder="ITEM NAME" autocomplete="on" />
                    </td>

                    <td style="padding:10px;" class="field ui left icon input">
                        @*@Html.Label("Units")*@
                        @Html.DropDownListFor(m => m.Unit_Id, new SelectList(@ViewBag.Units, "Value", "Text"),"--Select Unit--", new { @class = "ui dropdown" })
                    </td>
                    <td style="padding:10px;" class="field ui left icon input">
                        @*@Html.Label("Price Type")*@
                        @Html.DropDownListFor(m => m.PriceType_Id, new SelectList(@ViewBag.priceTypelist, "Value", "Text"),"--Select Price Type--", new { @class = "ui dropdown", @onchange="getItemCount(this.value)" })
                    </td>
                </tr>

                <tr>
                    <td style="padding:10px;" class="field ui left icon input">
                        <input class="form-control  rounded" type="text" id="getItemcount" name="ItemsCount"
                               placeholder="ITEM COUNT" autocomplete="on" />
                    </td>

                    <td style="padding:10px;" class="field ui left icon input">
                   
                    </td>

                    <td style="padding:10px;" class="field ui left icon input">
                        <input class="form-control rounded form-control" type="text" id="getAmount" name="GetAmount"
                               placeholder="AMOUNT" />

                    </td>
                </tr>

                <tr>
                    <td style="padding:10px;" class="field ui left icon input">
                        <input class="form-control rounded form-control" type="hidden" id="hiddenUnitName" name="HiddenUnitName" />
                    </td>

                    <td style="padding:10px;" class="field ui left icon input">
                        <input class="form-control rounded form-control" type="hidden" id="hiddenPrTypeName" name="HiddenPrTypeName" />
                    </td>
                    <td style="padding:10px;" class="field ui left icon input">
                        <input type="submit" value="ADD" class="ui button primary" id="addToCartBtn" />
                    </td>
                </tr>

            </tbody>
        </table>

        <hr />

        @using (Html.BeginForm("CreatePriceList", "Settings", FormMethod.Post, new { @class = "ui form root", role = "form" }))
        {

            @Html.AntiForgeryToken()

            <div>
                <table class="table table-striped table-hover" style="min-width:100%">
                    <thead class="bg-dark text-white">
                        <tr>
                            <th>ITEM NAME</th>
                            <th>UNIT</th>
                            <th>ITEMS/Unit</th>
                            <th>AMOUNT</th>
                            <th>PRICE TYPE</th>
                            <th>
                                DELETE
                                <span class="fa fa-trash"></span>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="cartItemsTable"></tbody>
                </table>
            </div>

            <div>
                <input type="submit" value="SAVE" class="ui button success" id="createNoteBtn" />
            </div>
        }
    </div>
</div>

<style>
    th, td {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
</style>

<script>
    $(document).ready(() => {
        //Get Item
        $("#getItemname").autocomplete({

            source: function (request, response) {
               var url =  "@Url.Action("GetItemName","Inventory")";
                /*
                 request = searches for the "getItemname's" value from GetSourceList action method.
                 response = returns the response from the GetSourceList method.
                 */
                $.ajax({
                url: url, type: "GET", dataType: "json", cache: false, contentType: "application/json; charset=utf-8",
                    data: { getItemname: request.term },

                    success: function (data) {
                         response($.map(data, function (item) {

                        return {label: item.label, value: item.value };
                         }));

                    }

                })

            },

            select: function (event, ui) {
            event.preventDefault();

                var urldetails = "@Url.Action("GetItemDetails","Inventory")";

            $.ajax({
                cache: false, async: false, type: "GET",
                url: urldetails,
                 data: { getItemname: ui.item.value },
                success: function (data) {
                    var item = data;

                    $("#getItemname").val(item.Item_Name);
                    $("#getPrice").val(item.DummyPrice);
                    $("#getItemId").val(item.Id);


                },
                error: function (request, ajaxOptions, thrownError) {
                   alert('Failed to retrieve Item.');
                }
            });
            }


        });//End of Auto complete

        //Get Customers

        $("#getCustomer").autocomplete({

            source: function (request, response) {
               // debugger
                var customerTypeId = $("#CustomerTypeId").val();

               @*//var url =  "@Url.Action("GetVendor","Inventory")";*@


                var url = "/Inventory/GetCustomer/" + customerTypeId;

               @*var url =  "@Url.Action("GetCustomer","Inventory")";*@

                $.ajax({
                url: url, type: "GET", dataType: "json", cache: false, contentType: "application/json; charset=utf-8",
                    data: { getCustomer: request.term },

                    success: function (data) {
                         response($.map(data, function (customer) {
                            return {label: customer, value: customer };
                         }));
                    }

                })

            },

            select: function (event, ui) {
            event.preventDefault();

                var urldetails = "@Url.Action("GetCustomerDetails","Inventory")";

            $.ajax({
                cache: false, async: false, type: "GET",
                url: urldetails,
                 data: { getCustomer: ui.item.value },
                success: function (data) {
                    var customer = data;
                    //debugger
                    $("#getCustomer").val(customer);


                },
                error: function (request, ajaxOptions, thrownError) {
                   alert('Failed to retrieve Item.');
                }
            });
            }


        });
        //End Customer Auto-complete



        //Add To Cart Function
        $('#addToCartBtn').on('click', function () {

            var $cartTable = $('#cartItemsTable');
                     
                    var unitId = $('#Unit_Id').val();
                    var priceTypeId = $("#PriceType_Id").val();

                    var itemName = $('#getItemname').val();
               
                    var unitName = $("#hiddenUnitName").val();
                    var priceTypeName = $("#hiddenPrTypeName").val();
                    var itemCount = $('#getItemcount').val();

                    var amount = $("#getAmount").val();

                     

                    $cartTable.append(
                        '<tr class="dynamicRows">' +
                            '<td><input type="hidden" name="ItemName" class = "getItemName"    value="' + itemName + '"/>' + itemName + '</td>' +
                            '<td><input type="hidden" name="UnitName" class = "getUnit"     value="' + unitName + '"  style="width:60px;"/>' + unitName + '</td>' +
                            '<td><input type="hidden" name="ItemCount" class = "getItemcount"      value="' + itemCount + '"/>' + itemCount + '</td>' +
                            '<td><input type="hidden" name="AmountCost" class = "getAmountcost"  value="' + amount + '"/>' + amount + '</td>' +
                            '<td><input type="hidden" name="PriceTypeName" class = "getPriceType"      value="' + priceTypeName + '"/>' + priceTypeName + '</td>' +
                            '<td><input type="hidden" name="PriceTypeId" class = "getPriceTypeId"      value="' + priceTypeId + '"/>' + "" + '</td>' +
                            '<td><input type="hidden" name="UnitId" class = "getUnitId"      value="' + unitId + '"/>' + "" + '</td>' +
                        
                        
                            //Delete icon
                            '<td><a  class="fa fa-trash" style="color:red;" onClick="removeItem(this)">Delete</a></td>'
                        + '</tr>'
                    );

                    //cleans form
                    $(function () {
                        $clear = '';
                        //$('#getCustomer').val('');
                        $('#getItemname').val('');
                        $('#getItemcount').val('');
                        $('#getAmount').val('');
                        $('#hiddenUnitName').val('');
                        $('#hiddenPrTypeName').val('');
                        $('#Unit_Id').val('');
                        $('#PriceType_Id').val('');
                        
                    });

                    return false;
        });
        //Add To Cart END

        //Remove Item
        //removes record on clicking remove icon
        $(function removeItem() {
               // $(obj).parent().parent().remove();
              $(this).closest('tr .dynamicRows').remove();
                //$(this).closest('tr').remove();
        });
        //Remove Item END


    })//End of Document function


    function getItemCount(id) {
        var priceTypeId = id;
        var url = "/Inventory/GetItemCount/" + priceTypeId;
        //debugger
        $.ajax({
            url: url,
            data: {
                priceTypeId:priceTypeId
            },
            dataType: "json",
            type: "GET",
            error: () => {
                alert("Error getting Items Count!.");
            },
            success: (data) => {
                //debugger
                $("#getItemcount").val(data);
            }

        });

        GetUnitName(id);

        GetPriceTypeName(id);
    }

    function GetUnitName(id) {
        var url = "/Settings/GetUnitName/" + id;

        $.ajax({
            url: url,
            data: {
                id,id
            },
            dataType: "json",
            type: "get",
            error: () => {
                alert("Failed to retrieve Unit name");
            },
            success: (data) => {
                $("#hiddenUnitName").val(data);
                
            }
        });
    }

        function GetPriceTypeName(id) {
        var url = "/Settings/GetPriceTypeName/" + id;

        $.ajax({
            url: url,
            data: {
                id,id
            },
            dataType: "json",
            type: "get",
            error: () => {
                alert("Failed to retrieve Unit name");
            },
            success: (data) => {
                $("#hiddenPrTypeName").val(data);
      
            }
        });
    }

</script>



